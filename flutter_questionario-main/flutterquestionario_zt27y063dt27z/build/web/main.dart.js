// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const scroll_view = flutter_sdk.src__widgets__scroll_view;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const binding = flutter_sdk.src__widgets__binding;
  const card = flutter_sdk.src__material__card;
  const basic = flutter_sdk.src__widgets__basic;
  const flex = flutter_sdk.src__rendering__flex;
  const text_style = flutter_sdk.src__painting__text_style;
  const checkbox_list_tile = flutter_sdk.src__material__checkbox_list_tile;
  const radio_list_tile = flutter_sdk.src__material__radio_list_tile;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var question$ = Object.create(dart.library);
  var checkbox_question_widget = Object.create(dart.library);
  var radio_question_widget = Object.create(dart.library);
  var $toString = dartx.toString;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $addAll = dartx.addAll;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    BuildContextAndintToStatefulWidget: () => (T.BuildContextAndintToStatefulWidget = dart.constFn(dart.fnType(framework.StatefulWidget, [framework.BuildContext, core.int])))(),
    IdentityMapOfString$bool: () => (T.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    boolNTovoid: () => (T.boolNTovoid = dart.constFn(dart.fnType(dart.void, [T.boolN()])))(),
    StringToCheckboxListTile: () => (T.StringToCheckboxListTile = dart.constFn(dart.fnType(checkbox_list_tile.CheckboxListTile, [core.String])))(),
    RadioListTileOfString: () => (T.RadioListTileOfString = dart.constFn(radio_list_tile.RadioListTile$(core.String)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNTovoid: () => (T.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T.StringN()])))(),
    StringToRadioListTileOfString: () => (T.StringToRadioListTileOfString = dart.constFn(dart.fnType(T.RadioListTileOfString(), [core.String])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: question$.QuestionType.prototype,
        [_Enum__name]: "checkbox",
        [_Enum_index]: 0
      });
    },
    get C5() {
      return C[5] = dart.constList(["Desenv. Sistemas", "Automação", "Administração"], core.String);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: question$.Question.prototype,
        [Question_type]: C[4] || CT.C4,
        [Question_options]: C[5] || CT.C5,
        [Question_text]: "Quais cursos você conhece?"
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: question$.QuestionType.prototype,
        [_Enum__name]: "radio",
        [_Enum_index]: 1
      });
    },
    get C8() {
      return C[8] = dart.constList(["Matutino", "Vespertino", "Noturno"], core.String);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: question$.Question.prototype,
        [Question_type]: C[7] || CT.C7,
        [Question_options]: C[8] || CT.C8,
        [Question_text]: "Qual período você prefere?"
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[3] || CT.C3, C[3] || CT.C3, C[3] || CT.C3, C[3] || CT.C3, C[3] || CT.C3, C[3] || CT.C3, C[6] || CT.C6, C[6] || CT.C6, C[6] || CT.C6, C[6] || CT.C6, C[6] || CT.C6, C[6] || CT.C6, C[6] || CT.C6], question$.Question);
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: main.QuestionnairePage.prototype,
        [Widget_key]: null,
        [QuestionnairePage_questions]: C[2] || CT.C2
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Questionário"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 16,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 16,
        [EdgeInsets_left]: 16
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: main.MyApp.prototype,
        [Widget_key]: null
      });
    },
    get C12() {
      return C[12] = dart.constList([C[4] || CT.C4, C[7] || CT.C7], question$.QuestionType);
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 12,
        [EdgeInsets_right]: 12,
        [EdgeInsets_top]: 12,
        [EdgeInsets_left]: 12
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_value]: 700,
        [FontWeight_index]: 6
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[16] || CT.C16,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    }
  }, false);
  var C = Array(17).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "file:///zapp/project/lib/models/question.dart",
    "file:///zapp/project/lib/widgets/checkbox_question_widget.dart",
    "file:///zapp/project/lib/widgets/radio_question_widget.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  var Widget_key = dart.privateName(framework, "Widget.key");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var Question_type = dart.privateName(question$, "Question.type");
  var Question_options = dart.privateName(question$, "Question.options");
  var Question_text = dart.privateName(question$, "Question.text");
  var QuestionnairePage_questions = dart.privateName(main, "QuestionnairePage.questions");
  main.MyApp = class MyApp extends framework.StatelessWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.MyApp.new({key: key});
    }
    build(context) {
      return new app.MaterialApp.new({title: "Questionário", debugShowCheckedModeBanner: false, theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.indigo}), home: C[1] || CT.C1});
    }
  };
  (main.MyApp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    main.MyApp.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  const questions = QuestionnairePage_questions;
  main.QuestionnairePage = class QuestionnairePage extends framework.StatelessWidget {
    get questions() {
      return this[questions];
    }
    set questions(value) {
      super.questions = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new main.QuestionnairePage.new({key: key});
    }
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[9] || CT.C9}), body: new scroll_view.ListView.builder({padding: C[10] || CT.C10, itemCount: this.questions[$length], itemBuilder: dart.fn((context, index) => {
            let question = this.questions[$_get](index);
            if (question.type === question$.QuestionType.checkbox) {
              return new checkbox_question_widget.CheckboxQuestionWidget.new({question: question});
            } else {
              return new radio_question_widget.RadioQuestionWidget.new({question: question});
            }
          }, T.BuildContextAndintToStatefulWidget())})});
    }
  };
  (main.QuestionnairePage.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    this[questions] = C[2] || CT.C2;
    main.QuestionnairePage.__proto__.new.call(this, {key: key});
    ;
  }).prototype = main.QuestionnairePage.prototype;
  dart.addTypeTests(main.QuestionnairePage);
  dart.addTypeCaches(main.QuestionnairePage);
  dart.setMethodSignature(main.QuestionnairePage, () => ({
    __proto__: dart.getMethods(main.QuestionnairePage.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.QuestionnairePage, I[0]);
  dart.setFieldSignature(main.QuestionnairePage, () => ({
    __proto__: dart.getFields(main.QuestionnairePage.__proto__),
    questions: dart.finalFieldType(core.List$(question$.Question))
  }));
  main.main = function main$0() {
    return binding.runApp(C[11] || CT.C11);
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  question$.QuestionType = class QuestionType extends core._Enum {
    [_enumToString]() {
      return "QuestionType." + this[_name];
    }
  };
  (question$.QuestionType.new = function(index, name) {
    question$.QuestionType.__proto__.new.call(this, index, name);
    ;
  }).prototype = question$.QuestionType.prototype;
  dart.addTypeTests(question$.QuestionType);
  dart.addTypeCaches(question$.QuestionType);
  dart.setMethodSignature(question$.QuestionType, () => ({
    __proto__: dart.getMethods(question$.QuestionType.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(question$.QuestionType, I[1]);
  dart.setStaticFieldSignature(question$.QuestionType, () => ['values', 'checkbox', 'radio']);
  dart.defineLazy(question$.QuestionType, {
    /*question$.QuestionType.values*/get values() {
      return C[12] || CT.C12;
    },
    /*question$.QuestionType.checkbox*/get checkbox() {
      return C[4] || CT.C4;
    },
    /*question$.QuestionType.radio*/get radio() {
      return C[7] || CT.C7;
    }
  }, false);
  const text$ = Question_text;
  const options$ = Question_options;
  const type$ = Question_type;
  question$.Question = class Question extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let type = opts && 'type' in opts ? opts.type : null;
      return new question$.Question.new({text: text, options: options, type: type});
    }
  };
  (question$.Question.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[text$] = text;
    this[options$] = options;
    this[type$] = type;
    ;
  }).prototype = question$.Question.prototype;
  dart.addTypeTests(question$.Question);
  dart.addTypeCaches(question$.Question);
  dart.setLibraryUri(question$.Question, I[1]);
  dart.setFieldSignature(question$.Question, () => ({
    __proto__: dart.getFields(question$.Question.__proto__),
    text: dart.finalFieldType(core.String),
    options: dart.finalFieldType(core.List$(core.String)),
    type: dart.finalFieldType(question$.QuestionType)
  }));
  var question$0 = dart.privateName(checkbox_question_widget, "CheckboxQuestionWidget.question");
  checkbox_question_widget.CheckboxQuestionWidget = class CheckboxQuestionWidget extends framework.StatefulWidget {
    get question() {
      return this[question$0];
    }
    set question(value) {
      super.question = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let question = opts && 'question' in opts ? opts.question : null;
      return new checkbox_question_widget.CheckboxQuestionWidget.new({key: key, question: question});
    }
    createState() {
      return new checkbox_question_widget._CheckboxQuestionWidgetState.new();
    }
  };
  (checkbox_question_widget.CheckboxQuestionWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let question = opts && 'question' in opts ? opts.question : null;
    this[question$0] = question;
    checkbox_question_widget.CheckboxQuestionWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = checkbox_question_widget.CheckboxQuestionWidget.prototype;
  dart.addTypeTests(checkbox_question_widget.CheckboxQuestionWidget);
  dart.addTypeCaches(checkbox_question_widget.CheckboxQuestionWidget);
  dart.setMethodSignature(checkbox_question_widget.CheckboxQuestionWidget, () => ({
    __proto__: dart.getMethods(checkbox_question_widget.CheckboxQuestionWidget.__proto__),
    createState: dart.fnType(framework.State$(checkbox_question_widget.CheckboxQuestionWidget), [])
  }));
  dart.setLibraryUri(checkbox_question_widget.CheckboxQuestionWidget, I[2]);
  dart.setFieldSignature(checkbox_question_widget.CheckboxQuestionWidget, () => ({
    __proto__: dart.getFields(checkbox_question_widget.CheckboxQuestionWidget.__proto__),
    question: dart.finalFieldType(question$.Question)
  }));
  var TextStyle_overflow = dart.privateName(text_style, "TextStyle.overflow");
  var TextStyle_fontVariations = dart.privateName(text_style, "TextStyle.fontVariations");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var FontWeight_value = dart.privateName(ui, "FontWeight.value");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  checkbox_question_widget._CheckboxQuestionWidgetState = class _CheckboxQuestionWidgetState extends framework.State$(checkbox_question_widget.CheckboxQuestionWidget) {
    initState() {
      super.initState();
      for (let option of this.widget.question.options) {
        this.answers[$_set](option, false);
      }
    }
    build(context) {
      return new card.Card.new({margin: C[13] || CT.C13, child: new basic.Padding.new({padding: C[14] || CT.C14, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: (() => {
              let t2 = T.JSArrayOfWidget().of([new text.Text.new(this.widget.question.text, {style: C[15] || CT.C15})]);
              t2[$addAll](this.widget.question.options[$map](checkbox_list_tile.CheckboxListTile, dart.fn(option => new checkbox_list_tile.CheckboxListTile.new({title: new text.Text.new(option), value: this.answers[$_get](option), onChanged: dart.fn(value => {
                  this.setState(dart.fn(() => {
                    let t3;
                    this.answers[$_set](option, (t3 = value, t3 == null ? false : t3));
                  }, T.VoidTovoid()));
                }, T.boolNTovoid())}), T.StringToCheckboxListTile()))[$toList]());
              return t2;
            })()})})});
    }
    static ['_#new#tearOff']() {
      return new checkbox_question_widget._CheckboxQuestionWidgetState.new();
    }
  };
  (checkbox_question_widget._CheckboxQuestionWidgetState.new = function() {
    this.answers = new (T.IdentityMapOfString$bool()).new();
    checkbox_question_widget._CheckboxQuestionWidgetState.__proto__.new.call(this);
    ;
  }).prototype = checkbox_question_widget._CheckboxQuestionWidgetState.prototype;
  dart.addTypeTests(checkbox_question_widget._CheckboxQuestionWidgetState);
  dart.addTypeCaches(checkbox_question_widget._CheckboxQuestionWidgetState);
  dart.setMethodSignature(checkbox_question_widget._CheckboxQuestionWidgetState, () => ({
    __proto__: dart.getMethods(checkbox_question_widget._CheckboxQuestionWidgetState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(checkbox_question_widget._CheckboxQuestionWidgetState, I[2]);
  dart.setFieldSignature(checkbox_question_widget._CheckboxQuestionWidgetState, () => ({
    __proto__: dart.getFields(checkbox_question_widget._CheckboxQuestionWidgetState.__proto__),
    answers: dart.finalFieldType(core.Map$(core.String, core.bool))
  }));
  var question$1 = dart.privateName(radio_question_widget, "RadioQuestionWidget.question");
  radio_question_widget.RadioQuestionWidget = class RadioQuestionWidget extends framework.StatefulWidget {
    get question() {
      return this[question$1];
    }
    set question(value) {
      super.question = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let question = opts && 'question' in opts ? opts.question : null;
      return new radio_question_widget.RadioQuestionWidget.new({key: key, question: question});
    }
    createState() {
      return new radio_question_widget._RadioQuestionWidgetState.new();
    }
  };
  (radio_question_widget.RadioQuestionWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let question = opts && 'question' in opts ? opts.question : null;
    this[question$1] = question;
    radio_question_widget.RadioQuestionWidget.__proto__.new.call(this, {key: key});
    ;
  }).prototype = radio_question_widget.RadioQuestionWidget.prototype;
  dart.addTypeTests(radio_question_widget.RadioQuestionWidget);
  dart.addTypeCaches(radio_question_widget.RadioQuestionWidget);
  dart.setMethodSignature(radio_question_widget.RadioQuestionWidget, () => ({
    __proto__: dart.getMethods(radio_question_widget.RadioQuestionWidget.__proto__),
    createState: dart.fnType(framework.State$(radio_question_widget.RadioQuestionWidget), [])
  }));
  dart.setLibraryUri(radio_question_widget.RadioQuestionWidget, I[3]);
  dart.setFieldSignature(radio_question_widget.RadioQuestionWidget, () => ({
    __proto__: dart.getFields(radio_question_widget.RadioQuestionWidget.__proto__),
    question: dart.finalFieldType(question$.Question)
  }));
  radio_question_widget._RadioQuestionWidgetState = class _RadioQuestionWidgetState extends framework.State$(radio_question_widget.RadioQuestionWidget) {
    build(context) {
      return new card.Card.new({margin: C[13] || CT.C13, child: new basic.Padding.new({padding: C[14] || CT.C14, child: new basic.Column.new({crossAxisAlignment: flex.CrossAxisAlignment.start, children: (() => {
              let t3 = T.JSArrayOfWidget().of([new text.Text.new(this.widget.question.text, {style: C[15] || CT.C15})]);
              t3[$addAll](this.widget.question.options[$map](T.RadioListTileOfString(), dart.fn(option => new (T.RadioListTileOfString()).new({title: new text.Text.new(option), value: option, groupValue: this.selectedValue, onChanged: dart.fn(value => {
                  this.setState(dart.fn(() => {
                    this.selectedValue = value;
                  }, T.VoidTovoid()));
                }, T.StringNTovoid())}), T.StringToRadioListTileOfString()))[$toList]());
              return t3;
            })()})})});
    }
    static ['_#new#tearOff']() {
      return new radio_question_widget._RadioQuestionWidgetState.new();
    }
  };
  (radio_question_widget._RadioQuestionWidgetState.new = function() {
    this.selectedValue = null;
    radio_question_widget._RadioQuestionWidgetState.__proto__.new.call(this);
    ;
  }).prototype = radio_question_widget._RadioQuestionWidgetState.prototype;
  dart.addTypeTests(radio_question_widget._RadioQuestionWidgetState);
  dart.addTypeCaches(radio_question_widget._RadioQuestionWidgetState);
  dart.setMethodSignature(radio_question_widget._RadioQuestionWidgetState, () => ({
    __proto__: dart.getMethods(radio_question_widget._RadioQuestionWidgetState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(radio_question_widget._RadioQuestionWidgetState, I[3]);
  dart.setFieldSignature(radio_question_widget._RadioQuestionWidgetState, () => ({
    __proto__: dart.getFields(radio_question_widget._RadioQuestionWidgetState.__proto__),
    selectedValue: dart.fieldType(dart.nullable(core.String))
  }));
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "file:///zapp/project/lib/models/question.dart": question$,
    "file:///zapp/project/lib/widgets/checkbox_question_widget.dart": checkbox_question_widget,
    "file:///zapp/project/lib/widgets/radio_question_widget.dart": radio_question_widget
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/models/question.dart","/zapp/project/lib/widgets/checkbox_question_widget.dart","/zapp/project/lib/widgets/radio_question_widget.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CI,IA1BF,iCAAgB;AACd,UAAoB,6BAGD;AAF8B,QAA9B,AAAkB,6BAElB,eAF2B;;AAEL,QAAF,CAApB;;AAEnB,UAAO,AAAQ,uBAAY;AAKvB,QAJK,AAAqC,qBAA7B,qCAAuB,uBAAW,QAAC;AAG9C,UAFC,AAAQ,sBAAW,2BAA2B,CAC/C;;;wBAIL,SAAC,GAAG;AACL,UAAO,AAAQ,uBAAY;AAIvB,QAHC,AAAQ,sBAAW,wBAAwB,CAC5C,AAAE,CAAD,eACD,AAAW,UAAD;;2DAGM,yCACb,SAAC,MAAM,QAAQ,MAAM;AAC1B,cAAO,AAAQ,uBAAY;AAC4B,YAAlD,AAAQ,sBAAW,wBAAwB,CAAC,IAAI;;;EAI3D;;AAEiB;AAQd,MAPD,MAAS,gCACC;AACS,UAAf;6CAEe;AACmB,UAAjB;;IAGvB;;;;;;;;;;;;;;UC3C4B;AACxB,YAAO,iCACE,4CACqB,cACrB,yCAAgC;IAG3C;;;QAVmB;AAAb,8CAAa,GAAG;;EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBH;;;;;;;;;;UA2EK;AACxB,YAAO,oCACG,sDACO,uEAEF,AAAU,sCACR,SAAC,SAAS;AACf,2BAAW,AAAS,sBAAC,KAAK;AAChC,gBAAI,AAAS,AAAK,QAAN,UAAsB;AAChC,oBAAO,oEAAiC,QAAQ;;AAEhD,oBAAO,8DAA8B,QAAQ;;;IAKvD;;;QA7F+B;IAEV;AAFf,0DAAyB,GAAG;;EAAE;;;;;;;;;;;;;AAjBvB;EAAqB;;ECCZ;;;;;;ICPY;;;;;;;;;;;;;;;MAA/B,6BAAM;;;MAAS,+BAAQ;;;MAAE,4BAAK;;;;;;;;IAGpB;;;;;;IACM;;;;;;IACA;;;;;;;;;;;;;;QAGH;QACA;QACA;IAFA;IACA;IACA;;EACd;;;;;;;;;;;;ICPa;;;;;;;;;;;;AAKgC;IAA8B;;;QAHzC;QAAmB;;AAAjD,mFAA8B,GAAG;;EAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAW9C,MAAX;AACN,eAAS,SAAU,AAAO,AAAS;AACV,QAAvB,AAAO,oBAAC,MAAM,EAAI;;IAEtB;UAG0B;AACxB,YAAO,oDAEE,wDAEE,0CACkC,yCAC7B;+CACR,kBAAK,AAAO,AAAS;AAWlB,0BAVA,AAAO,AAAS,AAAQ,wEAAI,QAAC,UACvB,oDACE,kBAAK,MAAM,UACX,AAAO,oBAAC,MAAM,cACV,QAAO;AAGd,kBAFF,cAAS;;AACyB,oBAAhC,AAAO,oBAAC,MAAM,GAAU,KAAN,KAAK,EAAL,aAAS;;;;;IAS7C;;;;;;IAnCwB,eAAU;;;EAoCpC;;;;;;;;;;;;;;IC7CiB;;;;;;;;;;;;AAK6B;IAA2B;;;QAHtC;QAAmB;;AAA9C,6EAA2B,GAAG;;EAA0B;;;;;;;;;;;;;UAUpC;AACxB,YAAO,oDAEE,wDAEE,0CACkC,yCAC7B;+CACR,kBAAK,AAAO,AAAS;AAYlB,0BAXA,AAAO,AAAS,AAAQ,8DAAI,QAAC,UACvB,4CACE,kBAAK,MAAM,UACX,MAAM,cACD,+BACD,QAAC;AAGR,kBAFF,cAAS;AACc,oBAArB,qBAAgB,KAAK;;;;;IASvC;;;;;;IA5BQ;;;EA6BV","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    zapp__project__lib__models__question: question$,
    zapp__project__lib__widgets__checkbox_question_widget: checkbox_question_widget,
    zapp__project__lib__widgets__radio_question_widget: radio_question_widget
  };
}));

//# sourceMappingURL=main.js.map
